<?php
/**
 * @file
 * IP address range embargo support for Islandora objects.
 */

// Permissions.
define('ISLANDORA_IP_EMBARGO_ADMINISTER_PERMISSION', 'administer islandora ip embargoes');
define('ISLANDORA_IP_EMBARGO_CONTROL_EMBARGOES', 'control islandora ip embargoes');
define('ISLANDORA_IP_EMBARGO_MANAGE_EMBARGOES', 'manage islandora ip embargoes');
define('ISLANDORA_IP_EMBARGO_VIEW_PUBLIC_DATASTREAMS', 'View datastreams marked as public in the embargo management form.');

/**
 * Implements hook_permission().
 */
function islandora_ip_embargo_permission() {
  return array(
    ISLANDORA_IP_EMBARGO_ADMINISTER_PERMISSION => array(
      'title' => t('Administer embargoes'),
      'description' => t("Access Islandora IP Embargo's administration page."),
    ),
    ISLANDORA_IP_EMBARGO_CONTROL_EMBARGOES => array(
      'title' => t('Control embargoes'),
      'description' => t("Create, edit, delete an object's IP embargoes."),
    ),
    ISLANDORA_IP_EMBARGO_MANAGE_EMBARGOES => array(
      'title' => t('Manage embargoes'),
      'description' => t('Manage embargoed objects'),
    ),
    ISLANDORA_IP_EMBARGO_VIEW_PUBLIC_DATASTREAMS => array(
      'title' => t('Access public datastreams'),
      'description' => t('Access datastreams marked as public'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function islandora_ip_embargo_menu() {
  return array(
    'admin/islandora/tools/ip_embargo' => array(
      'title' => 'Islandora IP Embargo',
      'description' => 'Configure the Islandora IP Embargo module.',
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_ip_embargo_manage_lists_form'),
      'file' => 'includes/forms.inc',
      'access arguments' => array(ISLANDORA_IP_EMBARGO_ADMINISTER_PERMISSION),
    ),
    'admin/islandora/tools/ip_embargo/lists' => array(
      'title' => 'Network address lists',
      'weight' => -10,
      'description' => 'Configure IP Embargo network address lists.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_ip_embargo_manage_lists_form'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'file' => 'includes/forms.inc',
      'access arguments' => array(ISLANDORA_IP_EMBARGO_ADMINISTER_PERMISSION),
    ),
    'admin/islandora/tools/ip_embargo/lists/add' => array(
      'title' => 'Add an Islandora IP Embargo list',
      'description' => 'Create a list of IP addresses.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_ip_embargo_add_list_form'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'includes/forms.inc',
      'access arguments' => array(ISLANDORA_IP_EMBARGO_ADMINISTER_PERMISSION),
    ),
    'admin/islandora/tools/ip_embargo/ranges/add/%' => array(
      'title' => 'Add an Islandora IP Embargo Range',
      'description' => 'Create an IP Embargo address range.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_ip_embargo_add_range_form', 6),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'includes/forms.inc',
      'access arguments' => array(ISLANDORA_IP_EMBARGO_ADMINISTER_PERMISSION),
    ),
    'admin/islandora/tools/ip_embargo/misc' => array(
      'title' => 'Islandora IP Embargo settings',
      'description' => 'Settings.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_ip_embargo_settings_form'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'includes/forms.inc',
      'access arguments' => array(ISLANDORA_IP_EMBARGO_ADMINISTER_PERMISSION),
    ),
    'admin/islandora/tools/ip_embargo/lists/%' => array(
      'title' => 'Islandora IP Embargo list',
      'description' => "Configure an IP Embargo list's name and ranges.",
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_ip_embargo_edit_list_form', 5),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'includes/forms.inc',
      'access arguments' => array(ISLANDORA_IP_EMBARGO_ADMINISTER_PERMISSION),
    ),
    'islandora/object/%islandora_object/ip_embargo' => array(
      'title' => 'IP Embargo',
      'description' => "Configure an IP range embargo on the object.",
      'file' => 'includes/forms.inc',
      'page arguments' => array('islandora_ip_embargo_object_embargo_form', 2),
      'page callback' => 'drupal_get_form',
      'type' => MENU_LOCAL_TASK,
      'access callback' => 'edit_embargo_for_object',
      'access arguments' => array(2),
      //'access arguments' => array(ISLANDORA_IP_EMBARGO_CONTROL_EMBARGOES),
    ),
    'admin/islandora/tools/ip_embargo/manage' => array(
      'title' => 'Manage Embargoed Objects',
      'description' => "View a list of all embargoed objects",
      'file' => 'includes/forms.inc',
      'page arguments' => array('islandora_ip_embargo_manage_embargo_list_form'),
      'page callback' => 'drupal_get_form',
      'type' => MENU_LOCAL_TASK,
      'access arguments' => array(ISLANDORA_IP_EMBARGO_MANAGE_EMBARGOES),
    ),
  );
}

function edit_embargo_for_object($object) {
  $hook_result = module_invoke_all('edit_islandora_object_ip_embargo', $object);
  foreach ($hook_result as $result) {
    if (!$result) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Implements hook_edit_islandora_object_ip_embargo().
 *
 * @param type $object
 */
function islandora_ip_embargo_edit_islandora_object_ip_embargo($object) {
  return $object->id != 'islandora:root';
}

/**
 * Implements hook_islandora_object_access().
 *
 * This will let TNs through for embargoed objects.
 */
function islandora_ip_embargo_islandora_datastream_access($op, $islandora_datastream, $user) {
  module_load_include('inc', 'islandora_ip_embargo', 'includes/utilities');
  $parent = islandora_object_load($islandora_datastream->parent->id);
  if(!$parent) {
    $e = new Exception();
    watchdog_exception('bad fedora object', $e, "Parent ID not defined for DSID :dsid of :pid, value :v",
            array(
                ':dsid' => $islandora_datastream,
                ':pid' => gettype($parent),
                ':v' => (int)$parent)
            );
  }
  $embargoed_object = islandora_ip_embarga_nearest_embargo($parent);
  $restrict_access = islandora_ip_embargo_restrict_access($embargoed_object->id);
  $datastreams_allowed = islandora_ip_embargo_get_public_datastreams($embargoed_object->id);

  // If we're looking for a public datastream, let it through.
  if (in_array($islandora_datastream->id, $datastreams_allowed) && $restrict_access) {
    if(variable_get('islandora_ip_embargo_debug_logging', FALSE)){
      watchdog('IP Embargo', sprintf("Access GRANTED to ip %s for public DSID %s of object %s", ip_address(), $islandora_datastream->id, $parent->id), array(), WATCHDOG_DEBUG);
    }
    return TRUE;
  }
  elseif ($restrict_access) {
    if(variable_get('islandora_ip_embargo_debug_logging', FALSE)){
      watchdog('IP Embargo', sprintf("Access DENIED  to ip %s for DSID %s of object %s", ip_address(), $islandora_datastream->id, $parent->id), array(), WATCHDOG_DEBUG);
    }
    return FALSE;
  }

  // If we found no issues we let things proceed.
  if(variable_get('islandora_ip_embargo_debug_logging', FALSE)){
    watchdog('IP Embargo', sprintf("Embargo does not apply for ip %s for DSID %s of object %s", ip_address(), $islandora_datastream->id, $parent->id), array(), WATCHDOG_DEBUG);
  }
  return NULL;
}

/**
 * Implements hook_islandora_object_access().
 *
 * Checks for an IP address embargo and handles redirects if necessary.
 */
function islandora_ip_embargo_islandora_object_access($op, $islandora_object, $user) {
  module_load_include('inc', 'islandora_ip_embargo', 'includes/utilities');
  $embargoed_object = islandora_ip_embarga_nearest_embargo($islandora_object);

  // Handle an embargo.
  if (islandora_ip_embargo_restrict_access($embargoed_object->id) && !user_access(ISLANDORA_IP_EMBARGO_MANAGE_EMBARGOES)) {

    // Before redirect, check if this item has a soft embargo.
    $public_dsids = islandora_ip_embargo_get_public_datastreams($embargoed_object->id);

    if (!empty($public_dsids) && user_access(ISLANDORA_IP_EMBARGO_VIEW_PUBLIC_DATASTREAMS)) {
      return NULL;
    }
    // If there is a redirect configured then use it. If not let Drupal do it.
    $redirect_url = variable_get('islandora_ip_embargo_embargoed_redirect', '');
    if ($redirect_url) {
      if (strpos(current_path(), "islandora/object/{$islandora_object->id}") !== FALSE && islandora_ip_embargo_requesting_public_dsid($public_dsids)) {
        if (variable_get('islandora_ip_embargo_embargoed_redirect_append_url', 0)) {
          global $base_url;
          $redirect_target = $redirect_url . $base_url . '/' . current_path();
          drupal_goto($redirect_target);
        }
        else {
          drupal_goto($redirect_url);
        }
      }
      else {
        return FALSE;
      }
    }
    else {
      return FALSE;
    }
  }

  // If we found no issues we let things proceed.
  return NULL;
}

/**
 * Implements hook_cron().
 */
function islandora_ip_embargo_cron() {
  module_load_include('inc', 'islandora_ip_embargo', 'includes/utilities');

  watchdog('Cron Job Begin', 'The ip embargo cron job has begun.');

  islandora_ip_embargo_send_embargo_lift_events(variable_get(
    'islandora_ip_embargo_days_before_embargo_trigger',
    0
  ));

  // Execute cleanup on embargo expiry timestamps that have expired.
  islandora_ip_embargo_cron_cleanup(time());
  variable_set('islandora_ip_embargo_debug_logging', 0);
}

/**
 * Implements hook_preprocess_theme().
 *
 * Checks the path, if it's an Islandora TN DS then it uses JS to watermark
 * the resulting image.
 */
function islandora_ip_embargo_preprocess_image(&$variables) {
  module_load_include('inc', 'islandora_ip_embargo', 'includes/utilities');

  $image_path = parse_url($variables['path'], PHP_URL_PATH);
  $image_path_parts = explode('/', $image_path);
  $size_of_image_path = count($image_path_parts);
  $text = variable_get('islandora_ip_embargo_overlay_text', 'EMBARGOED');
  $color = variable_get('islandora_ip_embargo_overlay_text_color', 'FF0000');

  if ($image_path_parts[$size_of_image_path - 1] == 'view' &&
      $image_path_parts[$size_of_image_path - 2] == 'TN' &&
      $image_path_parts[$size_of_image_path - 3] == 'datastream') {

    $pid = urldecode($image_path_parts[$size_of_image_path - 4]);
    $islandora_object = islandora_object_load($pid);
    if(!$islandora_object) {
        $e = new Exception();
        watchdog_exception('bad fedora PID', $e, "Failed loading object for PID $pid");
    }
    $embargo_result = islandora_ip_embargo_get_embargo(islandora_ip_embarga_nearest_embargo($islandora_object));

    if ($embargo_result->rowCount() && $embargo_result->fetchObject()->lid != 0) {
      drupal_add_js(drupal_get_path('module', 'islandora_ip_embargo') . '/js/embargoed_images.js');
      drupal_add_js(array('islandora_ip_embargo' => array('text' => $text, 'color' => $color)), array('type' => 'setting'));
      if (isset($variables['#attributes']['class'])) {
        $variables['attributes']['class'] = $variables['#attributes']['class']
          . 'islandora_ip_embargo_embargoed';
      }
      else {
        $variables['attributes']['class'] = 'islandora_ip_embargo_embargoed';
      }
    }
  }
}

/**
 * Implements hook_islandora_view_object_alter.
 */
function islandora_ip_embargo_islandora_view_object_alter(&$object, &$rendered) {
  if(!array_key_exists(NULL, $rendered) || !array_key_exists('#markup', $rendered[NULL])) {
    return;
  }
  module_load_include('inc', 'islandora_ip_embargo', 'includes/utilities');
  $embargo_details = '<div class="ip-embargo-details">';
  $nearest_embargo = islandora_ip_embarga_nearest_embargo($object);
  $embargo = islandora_ip_embargo_get_embargo($nearest_embargo->id);
  if ($embargo->rowCount()) {
    $embargo_info = $embargo->fetchObject();
    $list_info = islandora_ip_embargo_get_list_object_by_lid($embargo_info->lid);
    $list_results = islandora_ip_embargo_get_lists_information($embargo_info->lid, FALSE);

    $in_range = FALSE;
    if ($list_results->rowCount()) {
      while ($list_info = $list_results->fetchObject()) {
        if (islandora_ip_embargo_ip_in_range($list_info->low_end, $list_info->high_end)) {
          $in_range = TRUE;
          break;
        }
      }
    }
    $msg_type = $in_range ? 'islandora_ip_embargo_message_ebargoed_but_in_range' : 'islandora_ip_embargo_message_ebargoed_and_outta_range';
    $embargo_details .= islandora_ip_embargo_get_message($msg_type, $list_info, $object, $nearest_embargo);
    $embargo_details .= "</div>";
  }
  $rendered[NULL]['#markup'] .= $embargo_details;
}

function islandora_ip_embargo_get_message($msg_type, $list_info, $object, $nearest_embargo) {
  module_load_include('inc', 'islandora_ip_embargo', 'includes/forms');
  $raw = variable_get($msg_type, islandora_ip_embargo_get_default_msg_text($msg_type));
  return islandora_ip_embargo_expand_text_tokens($list_info, $object, $nearest_embargo, $raw);
}

function islandora_ip_embargo_get_access_condition_by_type($candidates, $type) {
  $full_types = ['rights' => 'Rights', 'contact' => 'Contact Information'];
  if (!array_key_exists($type, $full_types)) {
    return FALSE;
  }
  foreach ($candidates as $candidate) {
    $mods = simplexml_load_string($candidate['MODS']->content);
    foreach ($mods->accessCondition as $element) {
      if ($element['displayLabel'] == $full_types[$type]) {
        return $element;
      }
    }
  }
  return FALSE;
}

function islandora_ip_embargo_expand_text_tokens($list_info, $object, $nearest_embargo, $raw_text) {
  preg_match_all('/(%%[a-z\-]+%%)/', $raw_text, $matches);

  foreach ($matches[1] as $match) {
    $replacement = islandora_ip_embargo_get_text_replacement($match, $list_info, $object, $nearest_embargo);
    $raw_text = str_replace($match, $replacement, $raw_text);
  }
  return $raw_text;
}

function islandora_ip_embargo_get_text_replacement($key, $list_info, $object, $nearest_embargo) {
  switch ($key) {
    case '%%institution%%':
      $institution = "The owning institution";
      if (module_exists('islandora_namespace_homepage')) {
        module_load_include('php', 'islandora_namespace_homepage', 'includes/db');
        module_load_include('php', 'islandora_namespace_homepage', 'includes/namespaces');
        $ns_prefix = parse_pid($object->id, 'prefix');
        $record = get_record($ns_prefix);
        $institution = get_field_or_default('title', $record, $ns_prefix);
      }
      return $institution;

    case '%%geographic-description%%':
      return $list_info->description;

    case '%%rights%%':
    case '%%contact%%':
      $type = str_replace('%%', '', $key);
      return islandora_ip_embargo_get_access_condition_by_type(array($object, $nearest_embargo), $type);
  }
}
